plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven'
    id 'signing'
    id 'com.gradle.plugin-publish' version '0.10.1'
    id "io.codearte.nexus-staging" version "0.11.0"
}

dependencies {
    compileOnly gradleApi()
    compileOnly "org.codehaus.groovy:groovy-all:${project.property('groovy.version')}"
    testCompile gradleTestKit()
    testCompile "org.codehaus.groovy:groovy-all:${project.property('groovy.version')}"
    testCompile "org.hamcrest:hamcrest-all:${project.property('hamcrest.version')}"
    testCompile "org.mockito:mockito-core:${project.property('mockito.version')}"
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

groovydoc {
    docTitle = description
}

task groovydocJar(type: Jar, dependsOn: 'groovydoc') {
    classifier 'javadoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar, groovydocJar
}

if (project.hasProperty('gradle.publish.key')) {
  pluginBundle {
    website = 'https://github.com/jprante/gradle-plugin-docker'
    vcsUrl = 'https://github.com/jprante/gradle-plugin-docker'
    description = 'Gradle Docker Plugin executes docker build and push from within Gradle'
    tags = ['gradle', 'docker']
    plugins {
        dockerPlugin {
            id = 'org.xbib.gradle.plugin.docker'
            displayName = 'Gradle Docker Plugin'
        }
    }
  }
}

ext {
    user = 'jprante'
    projectName = 'gradle-plugin-docker'
    projectDescription = 'Docker plugin for Gradle'
    scmUrl = 'https://github.com/jprante/gradle-plugin-docker'
    scmConnection = 'scm:git:git://github.com/jprante/gradle-plugin-docker.git'
    scmDeveloperConnection = 'scm:git:git://github.com/jprante/gradle-plugin-docker.git'
}

task sonatypeUpload(type: Upload, dependsOn: build) {
    group = 'publish'
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        if (project.hasProperty('ossrhUsername')) {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: uri(ossrhReleaseUrl)) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: uri(ossrhSnapshotUrl)) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    groupId project.group
                    artifactId project.name
                    version project.version
                    name projectName
                    description projectDescription
                    packaging 'jar'
                    inceptionYear '2018'
                    url scmUrl
                    organization {
                        name 'xbib'
                        url 'http://xbib.org'
                    }
                    developers {
                        developer {
                            id user
                            name 'JÃ¶rg Prante'
                            email 'joergprante@gmail.com'
                            url 'https://github.com/jprante'
                        }
                    }
                    scm {
                        url scmUrl
                        connection scmConnection
                        developerConnection scmDeveloperConnection
                    }
                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = "org.xbib"
}
